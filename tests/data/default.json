{
  "tests": [
    {
      "score": 1,
      "source": "f(10)",
      "actual": "apply function f to 10",
      "expected": "apply function f to 10"
    },
    {
      "score": 1,
      "source": "f(g(x))=b^{\\log_b{x}}",
      "actual": "apply function f to apply function g to x equals b super log base b of x",
      "expected": "apply function f to apply function g to x equals b super log base b of x"
    },
    {
      "score": 1,
      "source": "20^{\\circ}",
      "actual": "20 degrees",
      "expected": "20 degrees"
    },
    {
      "score": 1,
      "source": "20\\degree",
      "actual": "20 degrees",
      "expected": "20 degrees"
    },
    {
      "score": 1,
      "source": "\\tan\\pi",
      "actual": "tangent pi",
      "expected": "tangent pi"
    },
    {
      "score": 1,
      "source": "\\cos^{-1}\\pi",
      "actual": "arccosine pi",
      "expected": "arccosine pi"
    },
    {
      "score": 1,
      "source": "\\left[\\right]",
      "actual": "left bracket right bracket",
      "expected": "left bracket right bracket"
    },
    {
      "score": 1,
      "source": "\\tau",
      "actual": "tau",
      "expected": "tau"
    },
    {
      "score": 1,
      "source": "\\csc^{-1} 0",
      "actual": "arccosecant 0",
      "expected": "arccosecant 0"
    },
    {
      "score": 1,
      "source": "x \\in y",
      "actual": "x in y",
      "expected": "x in y"
    },
    {
      "score": 1,
      "source": "[x,y]",
      "actual": "left bracket x comma y right bracket",
      "expected": "left bracket x comma y right bracket"
    },
    {
      "score": 1,
      "source": "\\left{\\right}",
      "actual": "left brace right brace",
      "expected": "left brace right brace"
    },
    {
      "score": 1,
      "source": "\\sin^{-1} 0",
      "actual": "arcsine 0",
      "expected": "arcsine 0"
    },
    {
      "score": 1,
      "source": "x''",
      "actual": "x''",
      "expected": "x''"
    },
    {
      "score": 1,
      "source": "\\cot^{-1} 0",
      "actual": "arccotangent 0",
      "expected": "arccotangent 0"
    },
    {
      "score": 1,
      "source": "x'",
      "actual": "x'",
      "expected": "x'"
    },
    {
      "score": 1,
      "source": "\\cot 0",
      "actual": "cotangent 0",
      "expected": "cotangent 0"
    },
    {
      "score": 1,
      "source": "H \\xrightarrow 2 H",
      "actual": "upper h xrightarrow 2 upper h",
      "expected": "upper h xrightarrow 2 upper h"
    },
    {
      "score": 1,
      "source": "\\sec^{-1} 0",
      "actual": "arcsecant 0",
      "expected": "arcsecant 0"
    },
    {
      "score": 1,
      "source": "\\tan^{-1} 0",
      "actual": "arctangent 0",
      "expected": "arctangent 0"
    },
    {
      "score": 1,
      "source": "0.\\overline{3} x",
      "actual": "0 point modifying above 3 with bar x",
      "expected": "0 point modifying above 3 with bar x"
    },
    {
      "score": 1,
      "source": "2xy",
      "actual": "2 x y",
      "expected": "2 x y"
    },
    {
      "score": 1,
      "source": "\\$100+\\$3",
      "actual": "$ 100 plus $ 3",
      "expected": "$ 100 plus $ 3"
    },
    {
      "score": 1,
      "source": "((20 * 45 * 10)cm - 900 cm) \\div (45 * 10 cm)",
      "actual": "left parenthesis left parenthesis 20 times 45 times 10 right parenthesis cm minus 900 cm right parenthesis divided by left parenthesis 45 times 10 cm right parenthesis",
      "expected": "left parenthesis left parenthesis 20 times 45 times 10 right parenthesis cm minus 900 cm right parenthesis divided by left parenthesis 45 times 10 cm right parenthesis"
    },
    {
      "score": 1,
      "source": "(1,28),(28,1)",
      "actual": "left parenthesis 1 comma 28 right parenthesis comma left parenthesis 28 comma 1 right parenthesis",
      "expected": "left parenthesis 1 comma 28 right parenthesis comma left parenthesis 28 comma 1 right parenthesis"
    },
    {
      "score": 1,
      "source": "384 oz+9oz-(48oz+11oz)",
      "actual": "384 oz plus 9 oz minus left parenthesis 48 oz plus 11 oz right parenthesis",
      "expected": "384 oz plus 9 oz minus left parenthesis 48 oz plus 11 oz right parenthesis"
    },
    {
      "score": 1,
      "source": "(2+.5)(9+12)",
      "actual": "left parenthesis 2 plus point 5 right parenthesis left parenthesis 9 plus 12 right parenthesis",
      "expected": "left parenthesis 2 plus point 5 right parenthesis left parenthesis 9 plus 12 right parenthesis"
    },
    {
      "score": 1,
      "source": "(2+.5)\\times(9+12)",
      "actual": "left parenthesis 2 plus point 5 right parenthesis times left parenthesis 9 plus 12 right parenthesis",
      "expected": "left parenthesis 2 plus point 5 right parenthesis times left parenthesis 9 plus 12 right parenthesis"
    },
    {
      "score": 1,
      "source": "(2+.5)*(9+12)",
      "actual": "left parenthesis 2 plus point 5 right parenthesis times left parenthesis 9 plus 12 right parenthesis",
      "expected": "left parenthesis 2 plus point 5 right parenthesis times left parenthesis 9 plus 12 right parenthesis"
    },
    {
      "score": 1,
      "source": "\\frac{2}{\\pi}=\\frac{\\sqrt{2}}{2}\\frac{\\sqrt{2+\\sqrt{2}}}{2}\\frac{\\sqrt{2+\\sqrt{2+\\sqrt{2}}}}{2}\\ldots",
      "actual": "start fraction 2 over pi end fraction equals start fraction start root 2 end root over 2 end fraction start fraction start root 2 plus start root 2 end root end root over 2 end fraction start fraction start root 2 plus start root 2 plus start root 2 end root end root end root over 2 end fraction ellipsis",
      "expected": "start fraction 2 over pi end fraction equals start fraction start root 2 end root over 2 end fraction start fraction start root 2 plus start root 2 end root end root over 2 end fraction start fraction start root 2 plus start root 2 plus start root 2 end root end root end root over 2 end fraction ellipsis"
    },
    {
      "score": 1,
      "source": "x^{e-2}=\\sqrt{\\sqrt[3]{\\sqrt[4]{\\sqrt[5]{x\\ldots}}}}, x \\in \\mathbb{R}",
      "actual": "x super e minus 2 baseline equals start root root index 3 start root root index 4 start root root index 5 start root x ellipsis end root end root end root end root comma x in mathbb upper r",
      "expected": "x super e minus 2 baseline equals start root root index 3 start root root index 4 start root root index 5 start root x ellipsis end root end root end root end root comma x in mathbb upper r"
    },
    {
      "score": 1,
      "source": "\\sqrt[n]{\\sqrt[m]{x}}=\\sqrt[m]{\\sqrt[n]{x}}",
      "actual": "root index n start root root index m start root x end root end root equals root index m start root root index n start root x end root end root",
      "expected": "root index n start root root index m start root x end root end root equals root index m start root root index n start root x end root end root"
    },
    {
      "score": 1,
      "source": "\\sqrt{\\sqrt{x+1}+\\sqrt{y+1}}",
      "actual": "start root start root x plus 1 end root plus start root y plus 1 end root end root",
      "expected": "start root start root x plus 1 end root plus start root y plus 1 end root end root"
    },
    {
      "score": 1,
      "source": "\\sqrt[3]{x}=x^\\frac{1}{3}",
      "actual": "root index 3 start root x end root equals x super one third",
      "expected": "root index 3 start root x end root equals x super one third"
    },
    {
      "score": 1,
      "source": "\\sqrt[{m+n}]{x+y}",
      "actual": "root index m plus n start root x plus y end root",
      "expected": "root index m plus n start root x plus y end root"
    },
    {
      "score": 1,
      "source": "\\sqrt{m+n}",
      "actual": "start root m plus n end root",
      "expected": "start root m plus n end root"
    },
    {
      "score": 1,
      "source": "\\sqrt{2}",
      "actual": "start root 2 end root",
      "expected": "start root 2 end root"
    },
    {
      "score": 1,
      "source": "x_a^b",
      "actual": "x sub a baseline super b",
      "expected": "x sub a baseline super b"
    },
    {
      "score": 1,
      "source": "f'''(y)=\\frac{df''(y)}{dy}",
      "actual": "apply function f''' to y equals start fraction d f'' left parenthesis y right parenthesis over d y end fraction",
      "expected": "apply function f''' to y equals start fraction d f'' left parenthesis y right parenthesis over d y end fraction"
    },
    {
      "score": 1,
      "source": "x''",
      "actual": "x''",
      "expected": "x''"
    },
    {
      "score": 1,
      "source": "T_{x-1}^2",
      "actual": "upper t sub x minus 1 baseline squared",
      "expected": "upper t sub x minus 1 baseline squared"
    },
    {
      "score": 1,
      "source": "\\ln x=\\int_1^x\\frac{dt}{t}",
      "actual": "natural log of x equals the definite integral on the interval from 1 to x of start fraction d t over t end fraction",
      "expected": "natural log of x equals the definite integral on the interval from 1 to x of start fraction d t over t end fraction"
    },
    {
      "score": 1,
      "source": "\\Phi_5",
      "actual": "upper phi sub 5",
      "expected": "upper phi sub 5"
    },
    {
      "score": 1,
      "source": "\\log_2(x)=\\frac{\\log_{10}(x)}{\\log_{10}(2)}",
      "actual": "log base 2 of left parenthesis x right parenthesis equals start fraction log base ten of left parenthesis x right parenthesis over log base ten of left parenthesis 2 right parenthesis end fraction",
      "expected": "log base 2 of left parenthesis x right parenthesis equals start fraction log base ten of left parenthesis x right parenthesis over log base ten of left parenthesis 2 right parenthesis end fraction"
    },
    {
      "score": 1,
      "source": "T_{n_1+n_0}",
      "actual": "upper t sub n sub 1 baseline plus n sub 0",
      "expected": "upper t sub n sub 1 baseline plus n sub 0"
    },
    {
      "score": 1,
      "source": "T_{2,3}",
      "actual": "upper t sub 2 comma 3",
      "expected": "upper t sub 2 comma 3"
    },
    {
      "score": 1,
      "source": "x_{1.3}",
      "actual": "x sub 1 point 3",
      "expected": "x sub 1 point 3"
    },
    {
      "score": 1,
      "source": "x_{10,000}",
      "options": {
        "allowThousandsSeparator": true
      },
      "actual": "x sub 10000",
      "expected": "x sub 10000"
    },
    {
      "score": 1,
      "source": "x_{-1}",
      "actual": "x sub negative 1",
      "expected": "x sub negative 1"
    },
    {
      "score": 1,
      "source": "x_1",
      "actual": "x sub 1",
      "expected": "x sub 1"
    },
    {
      "score": 1,
      "source": "T^(x^a+y^b)",
      "actual": "upper t super left parenthesis x super a baseline plus y super b baseline right parenthesis",
      "expected": "upper t super left parenthesis x super a baseline plus y super b baseline right parenthesis"
    },
    {
      "score": 1,
      "source": "y_a_b",
      "actual": "y sub a sub b",
      "expected": "y sub a sub b"
    },
    {
      "score": 1,
      "source": "y^a^b",
      "actual": "y super a super b",
      "expected": "y super a super b"
    },
    {
      "score": 1,
      "source": "y^a^c^b",
      "actual": "y super a super c super b",
      "expected": "y super a super c super b"
    },
    {
      "score": 1,
      "source": "y^{a^b_c}\\ne y^{a^bc}",
      "actual": "y super a super b sub c baseline baseline baseline not equal to y super a super b baseline c",
      "expected": "y super a super b sub c baseline baseline baseline not equal to y super a super b baseline c"
    },
    {
      "score": 1,
      "source": "x_{a^b}",
      "actual": "x sub a super b",
      "expected": "x sub a super b"
    },
    {
      "score": 1,
      "source": "x^{a_b}",
      "actual": "x super a sub b",
      "expected": "x super a sub b"
    },
    {
      "score": 1,
      "source": "x^{a_n+a_{n-1}}",
      "actual": "x super a sub n baseline plus a sub n minus 1",
      "expected": "x super a sub n baseline plus a sub n minus 1"
    },
    {
      "score": 1,
      "source": "T_{n-1}+5=0",
      "actual": "upper t sub n minus 1 baseline plus 5 equals 0",
      "expected": "upper t sub n minus 1 baseline plus 5 equals 0"
    },
    {
      "score": 1,
      "source": "x^{m+n}=x^mx^n",
      "actual": "x super m plus n baseline equals x super m baseline x super n",
      "expected": "x super m plus n baseline equals x super m baseline x super n"
    },
    {
      "score": 1,
      "source": "x^{m+n}",
      "actual": "x super m plus n",
      "expected": "x super m plus n"
    },
    {
      "score": 1,
      "source": "x^a",
      "actual": "x super a",
      "expected": "x super a"
    },
    {
      "score": 1,
      "source": "x_n",
      "actual": "x sub n",
      "expected": "x sub n"
    },
    {
      "score": 1,
      "source": "x^{\\frac{1}{2}}",
      "actual": "x super one half",
      "expected": "x super one half"
    },
    {
      "score": 1,
      "source": "a_0 + \\frac{b_1}{a_1+\\frac{b_2}{a_2+\\frac{b_3}{a_3+\\ldots}}}=a_0+\\frac{b_1}{a_1}+\\frac{b_2}{a_2}+\\ldots",
      "actual": "a sub 0 baseline plus start fraction b sub 1 baseline over a sub 1 baseline plus start fraction b sub 2 baseline over a sub 2 baseline plus start fraction b sub 3 baseline over a sub 3 baseline plus ellipsis end fraction end fraction end fraction equals a sub 0 baseline plus start fraction b sub 1 baseline over a sub 1 baseline end fraction plus start fraction b sub 2 baseline over a sub 2 baseline end fraction plus ellipsis",
      "expected": "a sub 0 baseline plus start fraction b sub 1 baseline over a sub 1 baseline plus start fraction b sub 2 baseline over a sub 2 baseline plus start fraction b sub 3 baseline over a sub 3 baseline plus ellipsis end fraction end fraction end fraction equals a sub 0 baseline plus start fraction b sub 1 baseline over a sub 1 baseline end fraction plus start fraction b sub 2 baseline over a sub 2 baseline end fraction plus ellipsis"
    },
    {
      "score": 1,
      "source": "3\\frac{5}{8}=\\frac{29}{8}",
      "actual": "3 and 5 eighths equals 29 eighths",
      "expected": "3 and 5 eighths equals 29 eighths"
    },
    {
      "score": 1,
      "source": "\\frac{\\frac{3}{5}}{8}=\\frac{3}{5}\\times\\frac{1}{8}",
      "actual": "start fraction 3 fifths over 8 end fraction equals 3 fifths times one eighth",
      "expected": "start fraction 3 fifths over 8 end fraction equals 3 fifths times one eighth"
    },
    {
      "score": 1,
      "source": "\\frac{20}{5}\\times\\frac{1}{100}=\\frac{1}{25}",
      "actual": "20 fifths times start fraction 1 over 100 end fraction equals start fraction 1 over 25 end fraction",
      "expected": "20 fifths times start fraction 1 over 100 end fraction equals start fraction 1 over 25 end fraction"
    },
    {
      "score": 1,
      "source": "\\frac{1}{2}+\\frac{2}{2}+\\frac{3}{2}+\\frac{4}{2}+\\ldots=\\sum\\limits_{x=1}^{\\infty}\\frac{n}{2}",
      "actual": "one half plus 2 halves plus 3 halves plus 4 halves plus ellipsis equals summation limits sub x equals 1 baseline super infinity baseline start fraction n over 2 end fraction",
      "expected": "one half plus 2 halves plus 3 halves plus 4 halves plus ellipsis equals summation limits sub x equals 1 baseline super infinity baseline start fraction n over 2 end fraction"
    },
    {
      "score": 1,
      "source": "x_a^b",
      "actual": "x sub a baseline super b",
      "expected": "x sub a baseline super b"
    },
    {
      "score": 1,
      "source": "\\frac{d^2y}{dx^2}+(ax^2+bx+c)y=0",
      "actual": "start fraction d squared y over d x squared end fraction plus left parenthesis a x squared plus b x plus c right parenthesis y equals 0",
      "expected": "start fraction d squared y over d x squared end fraction plus left parenthesis a x squared plus b x plus c right parenthesis y equals 0"
    },
    {
      "score": 1,
      "source": "x^3+6x^2-x=30",
      "actual": "x cubed plus 6 x squared minus x equals 30",
      "expected": "x cubed plus 6 x squared minus x equals 30"
    },
    {
      "score": 1,
      "source": "\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}",
      "actual": "start fraction negative b plus or minus start root b squared minus 4 a c end root over 2 a end fraction",
      "expected": "start fraction negative b plus or minus start root b squared minus 4 a c end root over 2 a end fraction"
    },
    {
      "score": 1,
      "source": "a - \\frac{b+c}{d-e} \\times f",
      "actual": "a minus start fraction b plus c over d minus e end fraction times f",
      "expected": "a minus start fraction b plus c over d minus e end fraction times f"
    },
    {
      "score": 1,
      "source": "\\frac{\\frac{x}{y}}{z}\\ne\\frac{x}{\\frac{y}{z}}",
      "actual": "start fraction start fraction x over y end fraction over z end fraction not equal to start fraction x over start fraction y over z end fraction end fraction",
      "expected": "start fraction start fraction x over y end fraction over z end fraction not equal to start fraction x over start fraction y over z end fraction end fraction"
    },
    {
      "score": 1,
      "source": "\\frac{\\frac{(1-x)\\frac{d}{dx}(2x)-2x\\frac{d}{dx}(1-x)}{(1-x)^2}}{1+(\\frac{2x}{1-x})^2}",
      "actual": "start fraction start fraction left parenthesis 1 minus x right parenthesis start fraction d over d x end fraction left parenthesis 2 x right parenthesis minus 2 x start fraction d over d x end fraction left parenthesis 1 minus x right parenthesis over left parenthesis 1 minus x right parenthesis squared end fraction over 1 plus left parenthesis start fraction 2 x over 1 minus x end fraction right parenthesis squared end fraction",
      "expected": "start fraction start fraction left parenthesis 1 minus x right parenthesis start fraction d over d x end fraction left parenthesis 2 x right parenthesis minus 2 x start fraction d over d x end fraction left parenthesis 1 minus x right parenthesis over left parenthesis 1 minus x right parenthesis squared end fraction over 1 plus left parenthesis start fraction 2 x over 1 minus x end fraction right parenthesis squared end fraction"
    },
    {
      "score": 1,
      "source": "a_0 + \\frac{1}{a_1+\\frac{1}{a_2+\\frac{1}{\\ldots+\\frac{1}{a_n}}}}",
      "actual": "a sub 0 baseline plus start fraction 1 over a sub 1 baseline plus start fraction 1 over a sub 2 baseline plus start fraction 1 over ellipsis plus start fraction 1 over a sub n baseline end fraction end fraction end fraction end fraction",
      "expected": "a sub 0 baseline plus start fraction 1 over a sub 1 baseline plus start fraction 1 over a sub 2 baseline plus start fraction 1 over ellipsis plus start fraction 1 over a sub n baseline end fraction end fraction end fraction end fraction"
    },
    {
      "score": 1,
      "source": "\\frac{1}{x}",
      "actual": "start fraction 1 over x end fraction",
      "expected": "start fraction 1 over x end fraction"
    },
    {
      "score": 1,
      "source": "1/x",
      "actual": "start fraction 1 over x end fraction",
      "expected": "start fraction 1 over x end fraction"
    },
    {
      "score": 1,
      "source": "\\frac{8}{10} = 0.80",
      "actual": "start fraction 8 over 10 end fraction equals 0 point 80",
      "expected": "start fraction 8 over 10 end fraction equals 0 point 80"
    },
    {
      "score": 1,
      "source": "\\abs{5-12}",
      "actual": "start absolute value 5 minus 12 end absolute value",
      "expected": "start absolute value 5 minus 12 end absolute value"
    },
    {
      "score": 1,
      "source": "\\abs{-12}",
      "actual": "start absolute value negative 12 end absolute value",
      "expected": "start absolute value negative 12 end absolute value"
    },
    {
      "score": 1,
      "source": "|-12|",
      "actual": "start absolute value negative 12 end absolute value",
      "expected": "start absolute value negative 12 end absolute value"
    },
    {
      "score": 1,
      "source": "{12}",
      "actual": "start set 12 end set",
      "expected": "start set 12 end set"
    },
    {
      "score": 1,
      "source": "{1, 2}",
      "actual": "start set 1 comma 2 end set",
      "expected": "start set 1 comma 2 end set"
    },
    {
      "score": 1,
      "source": "{1, 2, 3}",
      "actual": "start set 1 comma 2 comma 3 end set",
      "expected": "start set 1 comma 2 comma 3 end set"
    },
    {
      "score": 1,
      "source": "{}",
      "actual": "left brace right brace",
      "expected": "left brace right brace"
    },
    {
      "score": 1,
      "source": "A, B, C, \\ldots",
      "actual": "upper a comma upper b comma upper c comma ellipsis",
      "expected": "upper a comma upper b comma upper c comma ellipsis"
    },
    {
      "score": 1,
      "source": "d=\\sqrt{(3/(X-x)^3)-(Y-y)^3}",
      "actual": "d equals start root left parenthesis start fraction 3 over left parenthesis upper x minus x right parenthesis cubed end fraction right parenthesis minus left parenthesis upper y minus y right parenthesis cubed end root",
      "expected": "d equals start root left parenthesis start fraction 3 over left parenthesis upper x minus x right parenthesis cubed end fraction right parenthesis minus left parenthesis upper y minus y right parenthesis cubed end root"
    },
    {
      "score": 1,
      "source": "d=\\sqrt{(X-x)^2-(Y-y)^2}",
      "actual": "d equals start root left parenthesis upper x minus x right parenthesis squared minus left parenthesis upper y minus y right parenthesis squared end root",
      "expected": "d equals start root left parenthesis upper x minus x right parenthesis squared minus left parenthesis upper y minus y right parenthesis squared end root"
    },
    {
      "score": 1,
      "source": "0.3456",
      "actual": "0 point 3456",
      "expected": "0 point 3456"
    },
    {
      "score": 1,
      "source": "\\frac{22}{7}=3.\\overline{142857}",
      "actual": "22 sevenths equals 3 point modifying above 142857 with bar",
      "expected": "22 sevenths equals 3 point modifying above 142857 with bar"
    },
    {
      "score": 1,
      "source": "-32",
      "actual": "negative 32",
      "expected": "negative 32"
    },
    {
      "score": 1,
      "source": "-y",
      "actual": "negative y",
      "expected": "negative y"
    },
    {
      "score": 1,
      "source": "3--2",
      "actual": "3 minus negative 2",
      "expected": "3 minus negative 2"
    },
    {
      "score": 1,
      "source": "59*0=0",
      "actual": "59 times 0 equals 0",
      "expected": "59 times 0 equals 0"
    },
    {
      "score": 1,
      "source": "59 \\times 0 = 0",
      "actual": "59 times 0 equals 0",
      "expected": "59 times 0 equals 0"
    },
    {
      "score": 1,
      "source": "102+2214+15=2331",
      "actual": "102 plus 2214 plus 15 equals 2331",
      "expected": "102 plus 2214 plus 15 equals 2331"
    },
    {
      "score": 1,
      "source": "102+2,214+15=2,331",
      "options": {
        "allowThousandsSeparator": true
      },
      "actual": "102 plus 2214 plus 15 equals 2331",
      "expected": "102 plus 2214 plus 15 equals 2331"
    },
    {
      "score": 1,
      "source": "\\pi \\approx 3.1415",
      "actual": "pi almost equals 3 point 1415",
      "expected": "pi almost equals 3 point 1415"
    },
    {
      "score": 1,
      "source": "0.\\overline{x}",
      "actual": "0 point modifying above x with bar",
      "expected": "0 point modifying above x with bar"
    },
    {
      "score": 1,
      "source": "\\Pi",
      "actual": "upper pi",
      "expected": "upper pi"
    },
    {
      "score": 1,
      "source": "\\Kappa",
      "actual": "upper kappa",
      "expected": "upper kappa"
    },
    {
      "score": 1,
      "source": "x \\ne 10",
      "actual": "x not equal to 10",
      "expected": "x not equal to 10"
    },
    {
      "score": 1,
      "source": "Ax^2+Bx+C",
      "actual": "upper a x squared plus upper b x plus upper c",
      "expected": "upper a x squared plus upper b x plus upper c"
    },
    {
      "score": 1,
      "source": "\\alpha",
      "actual": "alpha",
      "expected": "alpha"
    },
    {
      "score": 1,
      "source": "d=\\sqrt{(X-x)^2-(Y-y)^2}",
      "actual": "d equals start root left parenthesis upper x minus x right parenthesis squared minus left parenthesis upper y minus y right parenthesis squared end root",
      "expected": "d equals start root left parenthesis upper x minus x right parenthesis squared minus left parenthesis upper y minus y right parenthesis squared end root"
    },
    {
      "score": 1,
      "source": "3.\\overline{142857}",
      "actual": "3 point modifying above 142857 with bar",
      "expected": "3 point modifying above 142857 with bar"
    },
    {
      "score": 1,
      "source": "-32",
      "actual": "negative 32",
      "expected": "negative 32"
    },
    {
      "score": 1,
      "source": "-y",
      "actual": "negative y",
      "expected": "negative y"
    },
    {
      "score": 1,
      "source": "1/2",
      "actual": "one half",
      "expected": "one half"
    },
    {
      "score": 1,
      "source": "x/2",
      "actual": "start fraction x over 2 end fraction",
      "expected": "start fraction x over 2 end fraction"
    },
    {
      "score": 1,
      "source": "x^4",
      "actual": "x to the power of 4",
      "expected": "x to the power of 4"
    },
    {
      "score": 1,
      "source": "x^y",
      "actual": "x super y",
      "expected": "x super y"
    },
    {
      "score": 1,
      "source": "x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}",
      "actual": "x equals start fraction negative b plus or minus start root b squared minus 4 a c end root over 2 a end fraction",
      "expected": "x equals start fraction negative b plus or minus start root b squared minus 4 a c end root over 2 a end fraction"
    }
  ]
}
